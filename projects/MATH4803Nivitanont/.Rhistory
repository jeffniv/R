data {
ym <- mean(y)
for ( i in 1:Ntotal ) {
zy[i] <- ( y[i] - ym )
}
for ( j in 1:Nx ) {
xm[j]  <- mean(x[,j])
for ( i in 1:Ntotal ) {
zx[i,j] <- ( x[i,j] - xm[j] )
}
}
}
model{
for( i in 1 : Ntotal ) {
zy[i] ~ dnorm( mu[i], tau )
mu[i] <- zbeta0 + sum( beta[1:Nx] * zx[i,1:Nx] )
}
for ( j in 1 : Nx ) {
beta[j] ~ dnorm(0.0, 1.0E-6)     # LASSO regression priors
}
tau <- pow(sigma, -2)
sigma ~ dunif(0, 100)
zbeta0 ~ dnorm(0.0, 1.0E-6)
",
ifelse(!is.null(xnew),"
#y given x
ydash ~ dnorm( mudash, tau)
mudash <- beta0 + sum( beta[1:Nx] * xdash[1:Nx] )",""),"
#transform from scaled data
beta0 <- zbeta0 + ym - sum(beta[1:Nx] * xm[1:Nx])
}
") # close quote for modelString, paste0
modelString
xnew=1
modelString = paste0("
# center the data
data {
ym <- mean(y)
for ( i in 1:Ntotal ) {
zy[i] <- ( y[i] - ym )
}
for ( j in 1:Nx ) {
xm[j]  <- mean(x[,j])
for ( i in 1:Ntotal ) {
zx[i,j] <- ( x[i,j] - xm[j] )
}
}
}
model{
for( i in 1 : Ntotal ) {
zy[i] ~ dnorm( mu[i], tau )
mu[i] <- zbeta0 + sum( beta[1:Nx] * zx[i,1:Nx] )
}
for ( j in 1 : Nx ) {
beta[j] ~ dnorm(0.0, 1.0E-6)     # Uninformative regression priors
}
tau <- pow(sigma, -2)
sigma ~ dunif(0, 100)
zbeta0 ~ dnorm(0.0, 1.0E-6)
",
ifelse(!is.null(xnew),"
#y given x
ydash ~ dnorm( mudash, tau)
mudash <- beta0 + sum( beta[1:Nx] * xdash[1:Nx] )",""),"
#transform from scaled data
beta0 <- zbeta0 + ym - sum(beta[1:Nx] * xm[1:Nx])
}
") # close quote for modelString, paste0
modelString
library(MATH4803Nivitanont)
data("iqsize")
x=as.matrix(iqsize[,c('Brain','Height','Weight')])
y=iqsize[,'PIQ']
testobj=UninformedMLR(x,
y,
xnew=1700,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
testobj=UninformedMLR(x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
testobj=UninformedMLR(x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=TRUE)
testobj=UninformedMLR(x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
m1=c(2,2)
m2=c(1,1
tol=1.0E-7
maxit=30
qq = function(x, n = 20, y = 8) # theta = x[1], w=x[2]
{
log(dbinom(y,size=n,prob=x[1])) + log(dbeta(x[1], x[2]*(100-2)+1, (1-x[2])*(100-2)+1))
}
library(rootSolve)
library(mvtnorm)
m=matrix(m1)
m = cbind(m,m2)
k=length(m1)
for(j in 1:k){
i=1
theta = matrix(m[,j], nr = k, nc = 1)
d = 1
while(d > tol & i < maxit) # conditions for continuing updates
{
theta = cbind(theta, theta[,i] - solve(hessian(qq, theta[,i])) %*% t(gradient(qq,theta[,i])))
i = i+1
g = gradient(qq, theta[,i]) - gradient(qq, theta[,i-1])
d = sqrt(g[1]^2 + g[2]^2)
}
# laplace approx
bsq[j] = solve(-hessian(f, theta[,i]))
px[j] = sqrt(det(bsq))*2*pi*h(theta[1,i],theta[2,i])
}
tol=1.0E-7
for(j in 1:k){
i=1
theta = matrix(m[,j], nr = k, nc = 1)
d = 1
while(d > tol & i < maxit) # conditions for continuing updates
{
theta = cbind(theta, theta[,i] - solve(hessian(qq, theta[,i])) %*% t(gradient(qq,theta[,i])))
i = i+1
g = gradient(qq, theta[,i]) - gradient(qq, theta[,i-1])
d = sqrt(g[1]^2 + g[2]^2)
}
# laplace approx
bsq[j] = solve(-hessian(f, theta[,i]))
px[j] = sqrt(det(bsq))*2*pi*h(theta[1,i],theta[2,i])
}
for(j in 1:k){
i=1
theta = matrix(m[,j], nr = k, nc = 1)
d = 1
while(d > tol && i < maxit) # conditions for continuing updates
{
theta = cbind(theta, theta[,i] - solve(hessian(qq, theta[,i])) %*% t(gradient(qq,theta[,i])))
i = i+1
g = gradient(qq, theta[,i]) - gradient(qq, theta[,i-1])
d = sqrt(g[1]^2 + g[2]^2)
}
# laplace approx
bsq[j] = solve(-hessian(f, theta[,i]))
px[j] = sqrt(det(bsq))*2*pi*h(theta[1,i],theta[2,i])
}
warnings()
m1=c(4,4)
m=matrix(m1)
m = cbind(m,m2)
k=length(m1)
for(j in 1:k){
i=1
theta = matrix(m[,j], nr = k, nc = 1)
d = 1
while(d > tol & i < maxit) # conditions for continuing updates
{
theta = cbind(theta, theta[,i] - solve(hessian(qq, theta[,i])) %*% t(gradient(qq,theta[,i])))
i = i+1
g = gradient(qq, theta[,i]) - gradient(qq, theta[,i-1])
d = sqrt(g[1]^2 + g[2]^2)
}
# laplace approx
bsq[j] = solve(-hessian(f, theta[,i]))
px[j] = sqrt(det(bsq))*2*pi*h(theta[1,i],theta[2,i])
}
setwd("C:/Users/Jeff/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Labs/lab 6 - glm")
leukemia=read.csv(file='leukemia_remission.csv')
View(leukemia)
save.image("C:/Users/Jeff/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Project/MATH4803Nivitanont/data/leukemia.RData")
setwd("C:/Users/Jeff/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Project/MATH4803Nivitanont")
library(MATH4803Nivitanont)
data('data/leukemia.RData')
data('leukemia'))
data('leukemia')
y=leukemia['Remiss']
y=leukemia[1]
x=leukemia[-1]
View(x)
testobj=   UninformedGLM( x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
x=as.matrix(leukemia[-1])
testobj=   UninformedGLM( x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
y=as.matrix(leukemia[1])
x=as.matrix(leukemia[-1])
testobj=   UninformedGLM( x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
library(MATH4803Nivitanont)
data('leukemia')
y=as.matrix(leukemia[1])
data('leukemia')
y=as.matrix(leukemia[1])
x=as.matrix(leukemia[-1])
testobj=   UninformedGLM( x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
View(x)
testobj=   UninformedGLM( x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
data('leukemia')
View(leukemia)
typeof(leukemia)
y=as.matrix(leukemia[1])
x=as.matrix(leukemia[-1])
testobj=   UninformedGLM( x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
library(MATH4803Nivitanont)
testobj=   UninformedGLM( x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
y=leukemia[1]
x=as.matrix(leukemia[-1])
testobj=   UninformedGLM( x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
y=leukemia[,1]
x=leukemia[,-1]
View(x)
testobj=   UninformedGLM( x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
x=as.matrix(leukemia[,-1])
testobj=   UninformedGLM( x,
y,
iter=3334,
burn=5000,
thin=3,
alpha=0.05,
parallel=TRUE,
DIC=FALSE)
library(devtools)
document()
library(MATH4803Nivitanont)
help(package="MATH4803Nivitanont")
library(MATH4803Nivitanont)
build_vignettes=TRUE
library(MATH4803Nivitanont)
help(package="MATH4803Nivitanont")
library(MATH4803Nivitanont)
library(MATH4803Nivitanont)
help(package="MATH4803Nivitanont")
library(MATH4803Nivitanont)
vignette(package="MATH4803Nivitanont")
devtools::install(build_vignettes = TRUE)
help(package="MATH4803Nivitanont")
devtools::install(build_vignettes = TRUE)
library(MATH4803Nivitanont)
help(package="MATH4803Nivitanont")
install.packages("C:/Users/jeffn/Downloads/regression_0.0.0.9000.tar.gz", repos = NULL, type = "source")
help(package='regression')
devtools::install(build_vignettes=TRUE)
data(codaSamples)
diagGGmcmc(codaSamples)
mcmc=coda::as.mcmc.list(codaSamples)
diagGGmcmc(mcmc)
data(clerical)
y=clerical[,1]
x=as.matrix(clerical[,-1])
xnew=c(5000, 75, 900, 200, 650)
testobj=RidgeReg(x,y,xnew, DIC=TRUE)
library(MATH4803Nivitanont)
?MATH4803Nivitanont
help(package="MATH4803Nivitanont")
diag1(mcmc)
data(codaSamples)
mcmc=coda::as.mcmc.list(codaSamples)
diag1(mcmc)
diag2(mcmc)
library(MATH4803Nivitanont)
help(package="MATH4803Nivitanont"
)
devtools:install(build_vignettes=TRUE)
devtools::install(build_vignettes=TRUE)
library(MATH4803Nivitanont)
help(package="MATH4803Nivitanont")
data(codaSamples)
data(codaSamples)
mcmc=coda::as.mcmc.list(codaSamples)
diag1(mcmc)
data(codaSamples)
mcmc=coda::as.mcmc.list(codaSamples)
diag1(mcmc)
diag2(mcmc)
library(MATH4803Nivitanont)
coda=data(codaSamples)
coda=data(codaSamples)
mcmc=coda::as.mcmc.list(codaSamples)
devtools::use_data(mcmc)
data(mcmc)
diag1(mcmc)
diag2(mcmc)
data(mcmc)
diag1(mcmc)
diag2(mcmc)
document()
library(devtools)
document()
library(MATH4803Nivitanont)
help(package="MATH4803Nivitanont")
devtools::install(build_vignettes=TRUE)
library(MATH4803Nivitanont)
devtools::install(build_vignettes=TRUE)
library(MATH4803Nivitanont)
help(package='MATH4803Nivitanont')
document()
library(MATH4803Nivitanont)
?diag1
diag1
diag1=function(mcmc){
ggs1=ggmcmc::ggs(mcmc)
# Examine the chains:
# Convergence diagnostics:
f1=ggmcmc::ggs_traceplot(ggs1) + ggthemes::theme_hc()
f2=ggmcmc::ggs_autocorrelation(ggs1) + ggthemes::theme_hc()
ggr1=gridExtra::grid.arrange(f1,f2, nrow=1, ncol=2 )
}
diag2=function(mcmc){
ggs1=ggmcmc::ggs(mcmc)
f3=ggmcmc::ggs_running(ggs1) + ggthemes::theme_hc()
f4=ggmcmc::ggs_density(ggs1) + ggthemes::theme_hc()
ggr2=gridExtra::grid.arrange(f3,f4, nrow=1, ncol=2 )
summary.mcmc=summary(mcmc)
return(summary.mcmc)
}
knit_with_parameters('C:/Users/jeffn/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Project/MATH4803Nivitanont/vignettes/Introduction.Rmd')
library(MATH4803Nivitanont)
install.packages('laplacesdemon')
install.packages('LaplacesDemon')
devtools::install(pkg = "MATH4803Nivitanont")
setwd("C:/Users/jeffn/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Project/MATH4803Nivitanont")
devtools::install(pkg = "MATH4803Nivitanont")
setwd('..')
devtools::install(pkg = "MATH4803Nivitanont")
devtools::install(pkg = "MATH4803Nivitanont")
library(c('roxygen2','devtools'))
library('roxygen2'
)
library(devtools)
roxygenise()
setwd("C:/Users/jeffn/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Project/MATH4803Nivitanont")
roxygenise()
help(package="MATH4803Nivitanont")
library(MATH4803Nivitanont)
help(package="MATH4803Nivitanont")
data(mcmc)
diag2(mcmc)
data(mcmc)
diag1(mcmc)
library(MATH4803Nivitanont)
InformedBetaBF(alpha2=2, beta2=5, n=10, x=4)
library(MATH4803Nivitanont)
data(clerical)
corrcheck(clerical)
library(MATH4803Nivitanont)
devtools::install(build_vignettes = TRUE)
document()
library(MATH4803Nivitanont)
devtools::install(build_vignettes=TRUE)
library(MATH4803Nivitanont)
library("MATH4803Nivitanont", lib.loc="~/R Files/library")
data(codaSamples)
mcmc=coda::as.mcmc.list(codaSamples)
testobj=diagGGmcmc(codaSamples, filetype='png', dpi=200)
library(MATH4803Nivitanont)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("C:/Users/jeffn/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Project/MATH4803Nivitanont")
data(codaSamples)
source('~/.active-rstudio-document', echo=TRUE)
library(MATH4803Nivitanont)
data(codaSamples)
mcmc=coda::as.mcmc.list(codaSamples)
testobj=  diagGGmcmc(codaSamples, filetype='png', dpi=200)
source('C:/Users/jeffn/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Assignments/Ass4/testproj2.R', echo=TRUE)
source('C:/Users/jeffn/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Assignments/Ass4/testproj2.R', echo=TRUE)
source('C:/Users/jeffn/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Assignments/Ass4/testproj2.R', echo=TRUE)
source('C:/Users/jeffn/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Assignments/Ass4/testproj2.R', echo=TRUE)
source('C:/Users/jeffn/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Assignments/Ass4/testproj2.R', echo=TRUE)
library(MATH4803Nivitanont)
testobj=InformedBetaBF(alpha2=2, beta2=5, n=10, x=4)
source('C:/Users/jeffn/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Assignments/Ass4/testproj2.R', echo=TRUE)
library(MATH4803Nivitanont)
source('C:/Users/jeffn/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Assignments/Ass4/testproj2.R', echo=TRUE)
library(MATH4803Nivitanont)
library(MATH4803Nivitanont)
library(MATH4803Nivitanont)
df1=read.csv(file=file.choose(), header = TRUE)
View(df1)
??index
colnames(df1)
colnames(df1)=c('Year','CO2','CH4','TempAnom')
library(s20x)
library(MATH4803Nivitanont)
corrcheck(df1)
rownames(df1)=df1$Year
df1=df1[-1]
corrcheck(df1)
anova(df1)
?anova
lm1=lm('CO2 ~ TempAnom', data=df1)
lm2=lm('CH4 ~ TempAnom', data=df1)
lm1
summary(lm1)
summary(lm2)
lm1=lm('TempAnom ~ CO2', data=df1)
lm2=lm('TempAnom ~ CH4', data=df1)
summary(lm1)
summary(lm2)
?step
lm3=lm('TempAnom ~.', data=df1)
summary(lm3)
step(lm3)
summary(lm2)
anova(lm3)
summary(anova(lm3))
summary(anova(lm1))
anova(lm1)
anova(lm2)
?anova
anova(lm1,lm2)
anova(lm1,lm2,lm3)
dev.new(noRStudioGD = TRUE)
plot(lm2)
layout(matrix(1:4, nr=2,nc=2))
plot(lm2)
bm1=UninformedSLR(x=df1$CH4,y=df1$TempAnom)
install.packages("C:/Users/Jeff/OneDrive/OU/2017 1-Spring/MATH 4803 - Bayesian Statistics/Project/MATH4803Nivitanont_1.3.tar.gz", repos = NULL, type = "source")
library(MATH4803Nivitanont)
graphics.off()
bm1=UninformedSLR(x=df1$CH4,y=df1$TempAnom)
install.packages('coda')
install('MATH4803Nivitanont', dependencies=T)
install.packages('MATH4803Nivitanont', dependencies=T)
install.packages(c('corrgram','ggmcmc','ggthemes','rjags','runjags')
)
library(MATH4803Nivitanont)
devtools::use_vignette('my-vignette')
install.packages('devtools')
library(MATH4803Nivitanont)
install.packages('pandoc')
library(MATH4803Nivitanont)
library(MATH4803Nivitanont)
